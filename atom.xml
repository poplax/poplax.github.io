<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[poPlax-Dev]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://poplax.github.io/"/>
  <updated>2015-12-13T10:09:28.000Z</updated>
  <id>http://poplax.github.io/</id>
  
  <author>
    <name><![CDATA[poPLax]]></name>
    <email><![CDATA[linjiang9999@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Use Protobuf (iOS)]]></title>
    <link href="http://poplax.github.io/2015/11/30/protobuf-iOS/"/>
    <id>http://poplax.github.io/2015/11/30/protobuf-iOS/</id>
    <published>2015-11-30T12:13:33.000Z</published>
    <updated>2015-12-13T10:09:28.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u5B89_u88C5Protobuf"><a href="#u5B89_u88C5Protobuf" class="headerlink" title="安装Protobuf"></a>安装Protobuf</h2><p><strong>两个方法安装:</strong></p>
<ol>
<li>Google官方Protobuf项目,<a href="https://developers.google.com/protocol-buffers/docs/overview" target="_blank" rel="external">官方文档</a></li>
<li>通过Homebrew安装,<code>brew install protobuf</code></li>
</ol>
<h2 id="u652F_u6301iOS"><a href="#u652F_u6301iOS" class="headerlink" title="支持iOS"></a>支持iOS</h2><ul>
<li>用这个<a href="https://github.com/alexeyxo/protobuf-objc" target="_blank" rel="external">版本</a> 安装会覆盖掉<code>brew protobuf</code></li>
<li>第二个方法支持iOS,看<a href="https://gist.github.com/BennettSmith/9487468ae3375d0db0cc" target="_blank" rel="external">这里</a></li>
</ul>
<h3 id="Get_the_Script"><a href="#Get_the_Script" class="headerlink" title="Get the Script"></a>Get the Script</h3><p><code>git clone https://gist.github.com/9487468ae3375d0db0cc.git build-protobuf</code></p>
<h3 id="Performing_the_Build"><a href="#Performing_the_Build" class="headerlink" title="Performing the Build"></a>Performing the Build</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd build-protobuf&#10;$ ./build-protobuf.sh</span><br></pre></td></tr></table></figure>
<p>Add <code>--interactive</code> to the above script if you would like the script to stop after each major operation. This makes it easier to inspect the output from the various steps for potential errors.</p>
<p>Add <code>--master</code> if you would prefer to build from the master branch in the Google Protobuf git repo.</p>
<h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><p>Build results are found in a folder called <code>protobuf-{version}</code>, where <code>{version}</code> will be either <code>2.6.1</code> or <code>master</code>. This folder contains <code>bin</code>, <code>include</code> and <code>lib</code> folders.</p>
<h3 id="Integration_with_Xcode"><a href="#Integration_with_Xcode" class="headerlink" title="Integration with Xcode"></a>Integration with Xcode</h3><p>Create a build rule in your Xcode project with the following settings.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;Process *Source files with names matching:* `*.proto`&#10;Using *Custom script:*&#10;&#10;cd $&#123;INPUT_FILE_DIR&#125;&#10;$&#123;SRCROOT&#125;/Google/protobuf/bin/protoc --proto_path=$&#123;INPUT_FILE_DIR&#125; $&#123;INPUT_FILE_PATH&#125; --cpp_out=$&#123;DERIVED_FILE_DIR&#125;&#10;&#10;Output Files&#10;$(DERIVED_FILE_DIR)/$(INPUT_FILE_BASE).pb.cc&#10;$(DERIVED_FILE_DIR)/$(INPUT_FILE_BASE).pb.h</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u5B89_u88C5Protobuf"><a href="#u5B89_u88C5Protobuf" class="headerlink" title="安装Protobuf"></a>安装Protobuf</h2><p><strong>两个方法安装:</str]]>
    </summary>
    
      <category term="C/C++" scheme="http://poplax.github.io/tags/C-C/"/>
    
      <category term="iOS" scheme="http://poplax.github.io/tags/iOS/"/>
    
      <category term="Tech" scheme="http://poplax.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TCP/IP,Socket,HTTP]]></title>
    <link href="http://poplax.github.io/2014/12/04/Socket,HTTP/"/>
    <id>http://poplax.github.io/2014/12/04/Socket,HTTP/</id>
    <published>2014-12-04T09:55:34.000Z</published>
    <updated>2015-12-13T08:53:58.000Z</updated>
    <content type="html"><![CDATA[<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p>要想明白Socket连接，先要明白TCP连接。手机能够使用联网功能是因为手机底层实现了TCP/IP协议，可以使手机终端通过无线网络建立TCP连接。TCP协议可以对上层网络提供接口，使上层网络数据的传输建立在“无差别”的网络之上。</p>
<p><strong>建立起一个TCP连接需要经过”三次握手”：</strong></p>
<ul>
<li>客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认</li>
<li>服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态</li>
<li>客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手</li>
</ul>
<p>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”（过程就不细写了，就是服务器和客户端交互，最终确定断开）</p>
<a id="more"></a>
<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>HTTP协议即超文本传送协议(Hypertext Transfer Protocol) 是Web联网的基础，也是手机联网常用的协议之一，HTTP协议是建立在TCP协议之上的一种应用。</p>
<p>HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。从建立连接到关闭连接的过程称为“一次连接”。</p>
<ul>
<li>在HTTP 1.0中，客户端的每次请求都要求建立一次单独的连接，在处理完本次请求后，就自动释放连接。</li>
<li>在HTTP 1.1中则可以在一次连接中处理多个请求，并且多个请求可以重叠进行，不需要等待一个请求结束后再发送下一个请求。 </li>
</ul>
<p>由于HTTP在每次请求结束后都会主动释放连接，因此HTTP连接是一种“短连接”，要保持客户端程序的在线状态，需要不断地向服务器发起连接请求。通常的做法是即时不需要获得任何数据，客户端也保持每隔一段固定的时间向服务器发送一次“保持连接”的请求，服务器在收到该请求后对客户端进行回复，表明知道客户端“在线”。若服务器长时间无法收到客户端的请求，则认为客户端“下线”，若客户端长时间无法收到服务器的回复，则认为网络已经断开。</p>
<h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><h2 id="u5957_u63A5_u5B57_uFF08Socket_uFF09_u6982_u5FF5"><a href="#u5957_u63A5_u5B57_uFF08Socket_uFF09_u6982_u5FF5" class="headerlink" title="套接字（Socket）概念"></a>套接字（Socket）概念</h2><p>套接字（Socket）是通信的基石，是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：</p>
<ol>
<li>连接使用的协议 </li>
<li>本地主机的IP地址</li>
<li>本地进程的协议端口</li>
<li>远地主机的IP地址</li>
<li>远地进程的协议端口</li>
</ol>
<p>应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个 TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了套接字(Socket)接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现 <strong>数据传输的并发服务</strong>。</p>
<h2 id="u5EFA_u7ACBSocket_u8FDE_u63A5"><a href="#u5EFA_u7ACBSocket_u8FDE_u63A5" class="headerlink" title="建立Socket连接"></a>建立Socket连接</h2><p>建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为<code>ClientSocket</code> ，另一个运行于服务器端，称为<code>ServerSocket</code>。</p>
<p>套接字之间的连接过程分为三个步骤：</p>
<ol>
<li>服务器监听</li>
<li>客户端请求</li>
<li>连接确认</li>
</ol>
<p><strong>服务器监听</strong>：</p>
<p>服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。</p>
<p><strong>客户端请求</strong>：</p>
<p>客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。</p>
<p><strong>连接确认</strong>：</p>
<p>当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</p>
<h1 id="Socket_u8FDE_u63A5_u4E0ETCP_u8FDE_u63A5"><a href="#Socket_u8FDE_u63A5_u4E0ETCP_u8FDE_u63A5" class="headerlink" title="Socket连接与TCP连接"></a>Socket连接与TCP连接</h1><p>创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当使用TCP协议进行连接时，该Socket连接就是一个TCP连接。</p>
<h1 id="Socket_u8FDE_u63A5_u4E0EHTTP_u8FDE_u63A5"><a href="#Socket_u8FDE_u63A5_u4E0EHTTP_u8FDE_u63A5" class="headerlink" title="Socket连接与HTTP连接"></a>Socket连接与HTTP连接</h1><p>由于通常情况下Socket连接就是TCP连接，因此Socket连接一旦建立，通信双方即可开始相互发送数据内容，直到双方连接断开。但在实际网络应用中，客户端到服务器之间的通信往往需要穿越多个中间节点，例如路由器、网关、防火墙等，大部分防火墙默认会关闭长时间处于非活跃状态的连接而导致 Socket 连接断连，因此需要通过轮询告诉网络，该连接处于活跃状态。</p>
<p>而HTTP连接使用的是“请求—响应”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。</p>
<p>很多情况下，需要服务器端主动向客户端推送数据，保持客户端与服务器数据的实时与同步。此时若双方建立的是Socket连接，服务器就可以直接将数据传送给客户端；若双方建立的是HTTP连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p>要想明白Socket连接，先要明白TCP连接。手机能够使用联网功能是因为手机底层实现了TCP/IP协议，可以使手机终端通过无线网络建立TCP连接。TCP协议可以对上层网络提供接口，使上层网络数据的传输建立在“无差别”的网络之上。</p>
<p><strong>建立起一个TCP连接需要经过”三次握手”：</strong></p>
<ul>
<li>客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认</li>
<li>服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态</li>
<li>客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手</li>
</ul>
<p>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”（过程就不细写了，就是服务器和客户端交互，最终确定断开）</p>]]>
    
    </summary>
    
      <category term="HTTP" scheme="http://poplax.github.io/tags/HTTP/"/>
    
      <category term="Socket" scheme="http://poplax.github.io/tags/Socket/"/>
    
      <category term="TCP/IP" scheme="http://poplax.github.io/tags/TCP-IP/"/>
    
      <category term="Tech" scheme="http://poplax.github.io/categories/Tech/"/>
    
  </entry>
  
</feed>
